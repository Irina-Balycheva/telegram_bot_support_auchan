import os
import telebot
from telebot import types
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import telegram_token, IAM_TOKEN, FOLDER_ID
# –ò–ò –ß–∞—Ç–ì–ü–¢
from chatGPT.chatGPT import chatGPT
# –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
from SpeechKIT.speechkit import voice_to_text, text_to_voice
# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
from YandexVision.Vision import Vision

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(telegram_token)

HELP = '''
/help - –ú–µ–Ω—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
/start - chatGPT
'''

# –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
comments = {}

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫
@bot.message_handler(commands=['help'])
def start(message):
    bot.send_message(message.chat.id, HELP)


# chatGPT
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –ê—à–∞–Ω, c–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!")
    chat_auchan = chatGPT(message.from_user.id)

    # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    # VtoT = voice_to_text()
    # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    # TtoV = text_to_voice()

    @bot.message_handler(content_types=["text"])
    def echo(message):
        chat_auchan.prompt(content=message.text)

        bot.send_message(message.chat.id, f'{chat_auchan.chat_response}')

        # with open('SpeechKIT/speech.ogg', "wb") as f:
        #     for audio_content in TtoV.translate(chat_auchan.chat_response):
        #         f.write(audio_content)
        #
        # bot.send_voice(message.from_user.id, open('SpeechKIT/speech.ogg', 'rb'))

        bot.send_message(message.chat.id, f'DEBUGGER: —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞, TRUE - –∑–∞–≤–µ—Ä—à–µ–Ω: {chat_auchan.end_dialog}')

        if (chat_auchan.end_dialog):
            show_smiley_keyboard(message.chat.id)


    @bot.message_handler(content_types=['voice'])
    def voice_processing(message):
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open('SpeechKIT/speech.ogg', 'wb') as new_file:
            new_file.write(downloaded_file)

        # VtoT.translate()

        # if (VtoT.text == None or VtoT.text == ''):
        #     bot.send_message(message.chat.id, f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        # else:
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        #     bot.send_message(message.chat.id, f'–¢–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {VtoT.text}')

        # print('prompt:', VtoT.text)
        # bot.send_message(message.chat.id, f'–í–∞—à –≤–æ–ø—Ä–æ—Å: {VtoT.text}')

        # chat_auchan.prompt(content=VtoT.text, voice_status=True)

        bot.send_message(message.chat.id, f'{chat_auchan.chat_response}')

        # with open('SpeechKIT/speech.ogg', "wb") as f:
        #     for audio_content in TtoV.translate(chat_auchan.chat_response):
        #         f.write(audio_content)
        #
        # bot.send_voice(message.from_user.id, open('SpeechKIT/speech.ogg', 'rb'))

        bot.send_message(message.chat.id, f'status end dialog: {chat_auchan.end_dialog}')

        if (chat_auchan.end_dialog):
            show_smiley_keyboard(message.chat.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ, —Ç–æ –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î
    @bot.message_handler(content_types=["photo"])
    def echo(message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ
        if not os.path.exists(f'database/photo/{str(message.from_user.id)}'):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
            os.mkdir(f'database/photo/{str(message.from_user.id)}')
            # print(f"–ü–∞–ø–∫–∞ '{str(message.from_user.id)}' —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            # print(f"–ü–∞–ø–∫–∞ '{str(message.from_user.id)}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            pass

        file_info = bot.get_file(message.photo[-1].file_id)
        file_id = message.photo[-1].file_id
        downloaded_file = bot.download_file(file_info.file_path)
        file_extension = file_info.file_path.split(".")[-1]

        with open(f'database/photo/{message.from_user.id}/{file_id}.{file_extension}', 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.reply_to(message, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

        CV = Vision(IAM_TOKEN, FOLDER_ID)

        json_data = CV.request_analyze(image_path=f'database/photo/{message.from_user.id}/{file_id}.{file_extension}')

        text = ' '.join(CV.extract_text(json_data))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        # bot.send_message(message.chat.id, f'{text}')

        chat_auchan.prompt(content=text, photo_status=True)

        bot.send_message(message.chat.id, f'{chat_auchan.chat_response}')

        # with open('SpeechKIT/speech.ogg', "wb") as f:
        #     for audio_content in TtoV.translate(chat_auchan.chat_response):
        #         f.write(audio_content)
        #
        # bot.send_voice(message.from_user.id, open('SpeechKIT/speech.ogg', 'rb'))

def show_smiley_keyboard(chat_id):
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    keyboard.add(
        types.InlineKeyboardButton('üò¢', callback_data='sad'),
        types.InlineKeyboardButton('üòû', callback_data='unhappy'),
        types.InlineKeyboardButton('üòê', callback_data='neutral'),
        types.InlineKeyboardButton('üòä', callback_data='happy'),
        types.InlineKeyboardButton('üòÉ', callback_data='smiling')
    )
    bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    if call.data == 'sad':
        bot.send_message(chat_id, '–ñ–∞–ª—å, —á—Ç–æ –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º! –ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. \
            –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É—á–µ—Å—Ç—å –í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!')
        bot.register_next_step_handler(call.message, save_comment, call.data)
    elif call.data == 'unhappy':
        bot.send_message(chat_id, '–ñ–∞–ª—å, —á—Ç–æ –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º! –ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. \
            –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É—á–µ—Å—Ç—å –í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!')
        bot.register_next_step_handler(call.message, save_comment, call.data)
    elif call.data == 'neutral':
        bot.send_message(call.message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É!')
    elif call.data == 'happy':
        bot.send_message(call.message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!')
    elif call.data == 'smiling':
        bot.send_message(call.message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!')

def save_comment(message, emoji):
    comment = message.text
    comments[emoji] = comment
    with open('comments.json', 'w') as file:
        json.dump(comments, file)
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ú—ã —Ü–µ–Ω–∏–º –í–∞—à–µ –º–Ω–µ–Ω–∏–µ.')



bot.polling(none_stop=True)
